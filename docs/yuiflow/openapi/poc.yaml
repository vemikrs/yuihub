openapi: 3.1.1
info:
  title: YuiHub/YuiFlow PoC API
  version: 0.2.0
  description: Proof of Concept API for YuiHub/YuiFlow
  contact:
    name: YuiHub Project
    url: https://github.com/vemikrs/yuihub
    email: contact@vemi.jp
  license:
    name: MIT
    url: https://opensource.org/license/mit/

servers: # Default server, This will be replaced by environment variable in deployment
  - url: http://localhost:3000
    description: Local development server

# Global security requirement (API key for all endpoints except /health)
security:
  - ApiKeyAuth: []

paths:
  /save:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InputMessage' }
      responses:
        '200':
          description: saved
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RecordEntry' }
  /search:
    get:
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: tag
          schema: { type: string }
        - in: query
          name: thread
          schema: { type: string }
      responses:
        '200':
          description: results
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/RecordEntry' }
  /trigger:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AgentTrigger' }
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  ref: { type: string }

components:
  schemas:
    InputMessage:
      type: object
      required: [id, when, source, author, text, mode]
      additionalProperties: false
      properties:
        id: { type: string, minLength: 1 }
        when: { type: string, format: date-time }
        source: { type: string, enum: [gpts, mcp, cli] }
        thread: { type: string }
        author: { type: string, enum: [user, assistant] }
        mode: { type: string, enum: [shelter] }
        text: { type: string, minLength: 1 }
        tags:
          type: array
          items: { type: string }
          maxItems: 24
        meta: { type: object }
    RecordEntry:
      type: object
      required: [id, when, source, text, mode]
      additionalProperties: false
      properties:
        id: { type: string }
        when: { type: string, format: date-time }
        thread: { type: string }
        source: { type: string }
        mode: { type: string, enum: [shelter] }
        controls: { type: object }
        text: { type: string }
        terms:
          type: array
          items: { type: string }
          maxItems: 24
        tags:
          type: array
          items: { type: string }
        links:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              type: { type: string }
              ref: { type: string }
    AgentTrigger:
      type: object
      required: [id, when, type, payload, mode]
      additionalProperties: false
      properties:
        id: { type: string }
        when: { type: string, format: date-time }
        type: { type: string, enum: [echo, summarize, custom] }
        mode: { type: string, enum: [shelter] }     # 追加（必須 / 定数）
        payload: { type: object }
        reply_to: { type: string }
